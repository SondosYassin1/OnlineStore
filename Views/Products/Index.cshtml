@using OnlineStore.Models.Products
@model ProductListViewModel;

@{
    ViewData["Title"] = "Product Management";
}

<main class="container my-4">
<<<<<<< Updated upstream
<<<<<<< Updated upstream
    <!-- Header section -->
    <partial name="_ProductListHeaderPartial" model="Model" />
=======
<!-- Header section -->
<partial name="_ProductListHeaderPartial" model="Model"/>
>>>>>>> Stashed changes
=======
    <!-- Header section -->
    <partial name="_ProductListHeaderPartial" model="Model" />
>>>>>>> Stashed changes

    <!-- Filter Section -->
    <partial name="_ProductFilterPartial" model="Model.Filter" />

    <!-- Products Table -->
    <div class="table-responsive">
        <table class="table table-striped table-hover">
            <thead class="table-dark">
                <tr>
                    <th>Image</th>
                    <th>Name</th>
                    <th>Category</th>
                    <th>Price</th>
                    <th>Status</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @if (Model.Products.Any())
                {
                    foreach (var product in Model.Products)
                    {
                        <partial name="_ProductItemPartial" model="product" />
                    }
                }
                else
                {
                    <tr>
                        <td colspan="6" class="text-center py-4">
                            <p class="text-muted mb-0">No products found. Try adjusting your filters or add a new product.</p>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

    <!-- Pagination -->
    @if (Model.Pagination.TotalItems > 0)
    {
        <partial name="_PaganationPartial" model="Model.Pagination" />
    }
<<<<<<< Updated upstream
</main>

<<<<<<< Updated upstream

=======
<!-- Pagination -->
@if (Model.Pagination.TotalItems > 0)
{
    <partial name="_PaganationPartial" model="Model.Pagination" />
}
</main>
<!-- Delete confirmation -->
>>>>>>> Stashed changes
=======
</main>


>>>>>>> Stashed changes
<partial name="_DeleteConfirmationPartial" />

@section Scripts {
    <script src="~/js/products.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Initialize tooltips
            var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'))
            var tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {
                return new bootstrap.Tooltip(tooltipTriggerEl)
            });

            const deleteModal = document.getElementById('deleteModal');
            console.log("****", deleteModal);
            if (deleteModal) {
                deleteModal.addEventListener('show.bs.modal', function (event) {
                    const itemDeleteButton = event.relatedTarget;
                    console.log("****", itemDeleteButton);
                    const productId = itemDeleteButton.getAttribute('data-id');
                    console.log("****", productId);
                    document.getElementById('productIdToDelete').value = productId;
                });
            };
        });

        // Function to handle status toggles
        function toggleStatus(productId, statusStype) {
            console.log('Togling ....');
            // in real life this is handled by AJAZ request
        }
    </script>

}